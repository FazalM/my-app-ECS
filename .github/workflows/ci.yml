name: Terraform and Docker Workflow

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      (contains(github.event.head_commit.message, '[force-ci]') || 
      steps.filter.outputs.terraform == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check if ci-pipeline/ has changed
        id: filter
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^ci-pipeline/'; then
            echo "terraform=true" >> $GITHUB_OUTPUT
          else
            echo "terraform=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Run Terraform
        if: steps.filter.outputs.terraform == 'true'
        working-directory: ci-pipeline
        run: |
          terraform init
          terraform apply -auto-approve

  docker:
    runs-on: ubuntu-latest
    needs: terraform
    if: |
      github.event_name == 'push' &&
      (contains(github.event.head_commit.message, '[force-docker]') || 
      steps.filter.outputs.docker == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check if files outside ci-pipeline/ and cd-pipeline/ have changed
        id: filter
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -vE '^(ci-pipeline/|cd-pipeline/)' | grep -q .; then
            echo "docker=true" >> $GITHUB_OUTPUT
          else
            echo "docker=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

      - name: Build Docker image
        run: |
          docker build -t my-ecr-app-repo .
          docker tag my-ecr-app-repo:latest ${{ secrets.REGISTRY }}:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.REGISTRY }}:latest